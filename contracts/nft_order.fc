#include "imports/stdlib.fc";
#include "const.fc";
#include "storage.fc";

(slice, int) begin_parse_exotic(cell c) asm "XCTOS";
int builder_null?(builder b) asm "ISNULL";


() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int mode) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6)  ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
            .store_slice(to_address)
            .store_grams(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    ifnot (builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), mode);
}

() send_money(slice to_address, int amount, int op) impure inline {
    send_msg(to_address, amount, op, cur_lt(), null(), 1);  ;; pay fees separatly, revert on errors
}

() send_all_money(slice to_address, int op) impure inline {
    send_msg(to_address, 0, op, cur_lt(), null(), 128);
}

() send_nft(int mode, int amount, slice nft_address, slice send_to, slice response_to, int query_id) impure inline {
    builder nft_transfer = begin_cell()
        .store_uint(op::nft_cmd_transfer, 32)
        .store_uint(query_id, 64)  ;; query_id
        .store_slice(send_to)      ;; new_owner_address
        .store_slice(response_to)  ;; response_address
        .store_int(0, 1)           ;; empty custom_payload
        .store_coins(0)            ;; forward amount to new_owner_address 0.00 TON
        .store_int(0, 1);          ;; empty forward_payload

    var nft_msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(nft_transfer.end_cell());

    send_raw_message(nft_msg.end_cell(), mode);
}

_ maybe_end_order(int my_balance, slice owner_address, cell order_state_cell, cell fees_cell, int is_external) impure {
    var (
        state,
        create_time,
        end_time,
        price_per_token,
        collected_fee,
        collected_royalty
    ) = unpack_order_state(order_state_cell);

    if ((now() < end_time) & (price_per_token < my_balance - collected_fee - collected_royalty - min_ton_for_storage::in_progress)) {
        return (0, order_state_cell);
    }
    if (is_external) { accept_message(); }

    var (mp_fee_addr, mp_fee_amount, royalty_address, royalty_amount) = unpack_order_fees(fees_cell);
    if (collected_fee > 0) { send_money(mp_fee_addr, collected_fee, op::fees); }
    if (collected_royalty > 0) { send_money(royalty_address, collected_royalty, op::fees); }
    send_all_money(owner_address, op::complete);

    return (-1, pack_order_state(state::completed, create_time, end_time, price_per_token, collected_fee, collected_royalty));
}

_ exec_order(int my_balance, slice nft_address, slice nft_owner, slice order_owner, cell order_state_cell, cell fees_cell, int msg_value) impure {
    var (
        mp_fee_addr,
        mp_fee_amount,
        royalty_address,
        royalty_amount
    ) = unpack_order_fees(fees_cell);
    var (
        state,
        create_time,
        end_time,
        price_per_token,
        collected_fee,
        collected_royalty
    ) = unpack_order_state(order_state_cell);

    collected_fee += mp_fee_amount;
    collected_royalty += royalty_amount;

    int profit = price_per_token - mp_fee_amount - royalty_amount;
    send_money(nft_owner, profit, op::profit);
    send_nft(1, msg_value, nft_address, order_owner, nft_owner, query_id::nft_sold);

    my_balance -= profit;
    order_state_cell = pack_order_state(state, create_time, end_time, price_per_token, collected_fee, collected_royalty);
    return (my_balance, order_state_cell);
}

int check_proof(int merkle_root, slice sender_address, slice in_msg_body) impure inline {
    ;; Do not throw error here due to return NFT back
    if (in_msg_body.slice_refs_empty?()) { return 0; }

    ;; validate merkle_proof itself
    cell proof_cell = in_msg_body~load_ref();
    (slice cs, int exotic?) = proof_cell.begin_parse_exotic();
    ifnot (exotic?) { return 0; }
    var cell_type = cs~load_uint(8);
    ifnot (cell_type == 3) { return 0; }
    var merkle_proof = cs~load_uint(256);
    ifnot (merkle_root == merkle_proof) { return 0; }

    ;; validate NFT address
    var (wc, sender_address_int) = parse_std_addr(sender_address);
    ifnot (wc == workchain) { return 0; }

    ;; check if NFT is required
    cell dict = cs~load_ref();
    (_, int found?) = dict.udict_get?(256, sender_address_int);
    ifnot (found?) { return 0; }

    return -1;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { return (); }

    slice sender_address = cs~load_msg_addr();
    int op = -1;
    ifnot (in_msg_body.slice_data_empty?()) {
        op = in_msg_body~load_uint(32);
        if ((op == 0) & equal_slices(in_msg_body, msg::cancel())) {
            op = op::cancel;
        }
    }

    int my_balance = pair_first(get_balance());
    var (
        owner_address,
        marketplace_address,
        merkle_root,
        order_state_cell,
        fees_cell,
        tokens_info_cell
    ) = unpack_order_data();

    var (
        state,
        create_time,
        end_time,
        price_per_token,
        collected_fee,
        collected_royalty
    ) = unpack_order_state(order_state_cell);

    ;; Marketplace should to skip order if there is no valid deploy message
    if (op == op::deploy) {  ;; deploy smc
        parse_std_addr(owner_address);
        throw_unless(err::invalid_owner, equal_slices(owner_address, sender_address));
        throw_unless(err::invalid_state, state == state::active);
        throw_unless(err::invalid_end_time, end_time > now());
        ;; max period is 31 days but for better experience build orders up to 30 days
        int one_month = 60 * 60 * 24 * 31;
        throw_unless(err::invalid_end_time, now() + one_month >= end_time);

        throw_unless(err::invalid_data, price_per_token > 0);
        throw_unless(err::invalid_data, price_per_token + min_ton_for_storage::deploy < my_balance);

        var (mp_fee_addr, mp_fee_amount, royalty_address, royalty_amount) = unpack_order_fees(fees_cell);
        throw_unless(err::invalid_data, price_per_token > mp_fee_amount + royalty_amount);

        force_chain(marketplace_address);
        force_chain(mp_fee_addr);
        force_chain(royalty_address);

        throw_unless(err::invalid_data, collected_fee == 0);
        throw_unless(err::invalid_data, collected_royalty == 0);

        var ds = tokens_info_cell.begin_parse();
        slice collection_address = ds~load_msg_addr();
        force_chain(collection_address);

        return ();
    }

    my_balance -= msg_value;

    ;; if (op == 0) {  ;; topup
    ;;     throw_unless(err::forbidden_topup, equal_slices(sender_address, owner_address)); ;; only owner can fill-up balance
    ;;     throw_unless(err::invalid_state, state == state::active);
    ;;     return ();
    ;; }

    if ((op == op::maintenance) & (state != state::active) & equal_slices(sender_address, marketplace_address)) {
        ;; way to fix unexpected troubles with contract
        var msg = in_msg_body~load_ref().begin_parse();
        var mode = msg~load_uint(8);
    
        throw_if(400, mode & 32);  ;; A-ta-ta, do not remove the contact!
        send_raw_message(msg~load_ref(), mode);
        return ();
    }

    ;; received nft
    if (op == op::nft_answer_ownership_assigned) {
        in_msg_body~skip_bits(64);  ;; query_id
        slice nft_owner = in_msg_body~load_msg_addr();

        ;; in_msg_body now is forward_payload
        if ((state == state::active) & (now() < end_time) & (msg_value >= min_ton_nft_received) & (check_proof(merkle_root, sender_address, in_msg_body))) {
            (my_balance, order_state_cell) = exec_order(my_balance, sender_address, nft_owner, owner_address, order_state_cell, fees_cell, msg_value);
        } else {
            ;; return nft back
            send_nft(64, 0, sender_address, nft_owner, nft_owner, query_id::nft_return);
        }
        if (state != state::active) {
            ;; Do not throw here
            ;; NFT should to be returned
            return ();
        }
        (_, order_state_cell) = maybe_end_order(my_balance, owner_address, order_state_cell, fees_cell, 0);
        pack_order_data(owner_address, marketplace_address, merkle_root, order_state_cell, fees_cell, tokens_info_cell);
        return ();
    }

    throw_unless(err::invalid_state, state == state::active);

    (int is_end, order_state_cell) = maybe_end_order(my_balance, owner_address, order_state_cell, fees_cell, 0);
    if (is_end) {
        pack_order_data(owner_address, marketplace_address, merkle_root, order_state_cell, fees_cell, tokens_info_cell);
        return ();
    }

    if (op == op::cancel) {
        ;; cancel order
        throw_unless(err::forbidden_cancel, equal_slices(sender_address, owner_address) | equal_slices(sender_address, marketplace_address));

        var (mp_fee_addr, mp_fee_amount, royalty_address, royalty_amount) = unpack_order_fees(fees_cell);
        if (collected_fee > 0) { send_money(mp_fee_addr, collected_fee, op::fees); }
        if (collected_royalty > 0) { send_money(royalty_address, collected_royalty, op::fees); }
        send_all_money(owner_address, op::cancel);

        order_state_cell = pack_order_state(state::canceled, create_time, end_time, price_per_token, collected_fee, collected_royalty);
        pack_order_data(owner_address, marketplace_address, merkle_root, order_state_cell, fees_cell, tokens_info_cell);
        return ();
    }

    throw(err::unknown_op);
}

() recv_external(slice in_msg) impure {
    var (owner_address, marketplace_address, merkle_root, order_state_cell, fees_cell, tokens_info_cell) = unpack_order_data();
    int my_balance = pair_first(get_balance());
    ;; if the messages won't be accepted (in case of still active order), the storage won't be updated
    (_, cell order_state_cell) = maybe_end_order(my_balance, owner_address, order_state_cell, fees_cell, -1);
    pack_order_data(owner_address, marketplace_address, merkle_root, order_state_cell, fees_cell, tokens_info_cell);
}

;;
;;  GET Methods
;;

_ get_order_data() method_id {
    var (owner_address, marketplace_address, merkle_root, order_state_cell, fees_cell, tokens_info_cell) = unpack_order_data();
    var (state, create_time, end_time, price_per_token, collected_fee, collected_royalty) = unpack_order_state(order_state_cell);
    var (mp_fee_addr, mp_fee_amount, royalty_address, royalty_amount) = unpack_order_fees(fees_cell);
    return (
        owner_address, marketplace_address, merkle_root,
        state, create_time, end_time, price_per_token, collected_fee, collected_royalty,
        mp_fee_addr, mp_fee_amount, royalty_address, royalty_amount,
        tokens_info_cell
    );
}

int get_capacity() method_id {
    var (owner_address, marketplace_address, merkle_root, order_state_cell, fees_cell, tokens_info_cell) = unpack_order_data();
    var (state, create_time, end_time, price_per_token, collected_fee, collected_royalty) = unpack_order_state(order_state_cell);
    var (mp_fee_addr, mp_fee_amount, royalty_address, royalty_amount) = unpack_order_fees(fees_cell);

    int my_balance = pair_first(get_balance());
    return max(0, (my_balance - collected_fee - collected_royalty - min_ton_for_storage::in_progress) / price_per_token);
}
